version: "3.8"

services:
  user-service:
    build: ./user-service
    ports:
      - "3000:3000"
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgres-user
      - POSTGRES_PORT=5432
      - POSTGRES_USER=db_user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=user_db
    networks:
      - microservices_net # Ensure it is part of the network

  order-service:
    build: ./order-service
    ports:
      - "3001:3001"
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgres-order
      - POSTGRES_PORT=5432
      - POSTGRES_USER=db_user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=order_db
    networks:
      - microservices_net # Ensure it is part of the network

  inventory-service:
    build: ./inventory-service
    ports:
      - "3002:3002"
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgres-inventory
      - POSTGRES_PORT=5432
      - POSTGRES_USER=inventory_user
      - POSTGRES_PASSWORD=inventory_password
      - POSTGRES_DB=inventory_db
    networks:
      - microservices_net # Ensure it is part of the network

  shipping-service:
    build: ./shipping-service
    ports:
      - "3003:3003"
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgres-shipping
      - POSTGRES_PORT=5434
      - POSTGRES_USER=db_shipping_user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=shipping_db
    networks:
      - microservices_net # Ensure it is part of the network

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672" # RabbitMQ message broker
      - "15673:15672" # RabbitMQ management console
    healthcheck:
      test: ["CMD-SHELL", "rabbitmqctl status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - microservices_net # Ensure it is part of the network

  postgres-user:
    image: postgres:13
    environment:
      POSTGRES_USER: db_user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: user_db
    ports:
      - "5432:5432"
    volumes:
      - ./init-scripts/init_user.sql:/docker-entrypoint-initdb.d/init_user.sql
    networks:
      - microservices_net # Ensure it is part of the network

  postgres-order:
    image: postgres:13
    environment:
      POSTGRES_USER: db_user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: order_db
    ports:
      - "5433:5432"
    volumes:
      - ./init-scripts/init_order.sql:/docker-entrypoint-initdb.d/init_order.sql
    networks:
      - microservices_net # Ensure it is part of the network

  postgres-inventory:
    image: postgres:13
    environment:
      POSTGRES_USER: inventory_user
      POSTGRES_PASSWORD: inventory_password
      POSTGRES_DB: inventory_db
    ports:
      - "5434:5432"
    volumes:
      - ./init-scripts/init_inventory.sql:/docker-entrypoint-initdb.d/init_inventory.sql
    networks:
      - microservices_net # Ensure it is part of the network

  postgres-shipping:
    image: postgres:13
    environment:
      POSTGRES_USER: db_shipping_user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: shipping_db
    ports:
      - "5435:5432"
    volumes:
      - ./init-scripts/init_shipping.sql:/docker-entrypoint-initdb.d/init_shipping.sql
    networks:
      - microservices_net # Ensure it is part of the network

  nginx:
    build:
      context: ./nginx
    ports:
      - "80:80" # Expose NGINX on port 80
    depends_on:
      - user-service
      - order-service
      - inventory-service
      - shipping-service
    networks:
      - microservices_net # Ensure it is part of the network

networks:
  microservices_net:
    driver: bridge
